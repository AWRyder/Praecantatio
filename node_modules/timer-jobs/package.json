{
  "name": "timer-jobs",
  "version": "0.1.0",
  "description": "Create timers that can run often, but not block by long executions",
  "main": "index.js",
  "scripts": {
    "test": "node test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/grahamkennery/timer-jobs"
  },
  "keywords": [
    "timers",
    "jobs"
  ],
  "author": {
    "name": "Graham Kennery"
  },
  "license": "BSD",
  "dependencies": {
    "debug": "~0.7.4"
  },
  "readme": "timer-jobs\n==========\n\nCreate timers that can run often, but not block by long executions. Great for worker-roles and such that have many jobs to do periodically.\n\n\n## Installation\n\n\t\t$ npm install timer-jobs\n\n## Usage\n\n``` javascript\nvar TimerJob = require('timer-jobs');\n\nvar someTimer = new TimerJob({interval: 5000}, function(done) {\n\tconsole.log('hey');\n\tdone();\n});\nsomeTimer.start();\n```\n\n## TimerJob Class\n\n### constructor (options, callback)\n\nOptions:\n\n- `blocking`: `boolean` - This determines if the timer should allow a new callback to be started before one finishes. Defaults to `true`.\n- `interval`: Interval time, in milliseconds. Attempts to start the callback at this value.\n- `autoStart`: `boolean` - No need to call `timer.start()` after creating the timer. Defaults to `false`.\n- `immediate`: `boolean` - If `true`, calls the callback right when the job starts, doesn't wait for `interval` milliseconds. Defaults to `false`\n- `ignoreErrors`: `boolean` - Ff `true`, automatically restarts the job if an error was sent from the callback.\n\nCallback:\n\nThe `function` to call every `interval` milliseconds. \n\n\n### timer.start()\n\nStarts up ye olde job!\n\n### timer.stop()\n\nStop the job! If a callback is in the middle of execution, it does not cancel it. Only when it calls back.\n\n### Event: start\n\n``` javascript\nfunction() {}\n```\n\nEmitted when the timer has successfully started.\n\n### Event: stop\n\n``` javascript\nfunction() {}\n```\n\nEmitted when the timer has successfully stopped.\n\n### Event: jobStart\n\n``` javascript\nfunction() {}\n```\n\nEmitted on every interval, BEFORE the callback function is called\n\n### Event: jobStop\n\n``` javascript\nfunction([err], [args]) {}\n```\n\nEmitted every time the callback calls its `done` function. If there is an error - the job HALTS until you start it back up, or if `options.ignoreErrors` is true.\n\n- `err`: Error passed from the callback\n- `args`: Any additional arguments passed from the callback",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/grahamkennery/timer-jobs/issues"
  },
  "_id": "timer-jobs@0.1.0",
  "dist": {
    "shasum": "9faf5d3b2cef1fef30077b91b1a68fae4a4b6500"
  },
  "_from": "timer-jobs@",
  "_resolved": "https://registry.npmjs.org/timer-jobs/-/timer-jobs-0.1.0.tgz"
}
