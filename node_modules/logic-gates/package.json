{
  "name": "logic-gates",
  "version": "0.0.1",
  "description": "Logical gates defined as methods",
  "main": "lib/index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/UmbraEngineering/node-logic-gates"
  },
  "keywords": [
    "and",
    "nand",
    "or",
    "nor",
    "xor",
    "xnor",
    "not",
    "logic",
    "gates",
    "boolean"
  ],
  "author": {
    "name": "James Brumond",
    "email": "james@jbrumond.me",
    "url": "http://www.jbrumond.me"
  },
  "license": "MIT",
  "readmeFilename": "readme.md",
  "readme": "\n# Logical gates defined as simple functions\n\nLogical gates (AND, NAND, OR, NOR, XOR, XNOR, NOT) made available as functions for ease of use in functional programming styles. An example, reducing an array to a single boolean value:\n\n```javascript\nvar gates = requrie('logic-gates');\n\n[true, true, true].reduce(gates.and);  // true\n[true, false, true].reduce(gates.and);  // false\n[false, false, false].reduce(gates.and);  // false\n```\n\n## Install\n\n```bash\n$ npm install [--save] logic-gates\n```\n\n## Usage\n\nThe defined logical gate methods are fast, accurate, and work on any type of input.\n\n```javascript\nvar gates = require('logic-gates');\n\ngates.and(true, false);  // false\ngates.nand(true, false);  // true\ngates.not.and(true, false);  // true\n\ngates.or(true, false);  // true\ngates.nor(true, false);  // false\ngates.not.or(true, false);  // false\n\ngates.xor(true, false);  // true\ngates.xnor(true, false);  // false\ngates.not.xor(true, false);  // false\n\ngates.not(true);  // false\ngates.not(false);  // true\n```\n",
  "bugs": {
    "url": "https://github.com/UmbraEngineering/node-logic-gates/issues"
  },
  "_id": "logic-gates@0.0.1",
  "dist": {
    "shasum": "21d3215bf3ae8e8e759a3ae510cf6182f5d5da57"
  },
  "_from": "logic-gates@",
  "_resolved": "https://registry.npmjs.org/logic-gates/-/logic-gates-0.0.1.tgz"
}
